// To GPU diavazei dedomena ana 16 bytes
// Opote ston shader prepei na to pareis ipopsin sou auto
// Episis prepei na to paris ipopsin sou kai sto CPU giati tou dineis data
// 1 float = 4 bytes

// WRONG EXAMPLE 1
cbuffer PerMaterialBuffer : register(b1)
{		
    float4 materialAlbedoColor; 				// float4 = 16 BYTES 	-> START OF MEMORY BLOCK 			-> 16 BYTES READ 	-> CORRECT READ -> END OF MEMORY BLOCK
	float2 materialTiling;						// float2 = 8 BYTES:	-> CONTINUE READING MEMORY BLOCK 	-> 8 BYTES READ 	-> CORRECT READ -> 8 BYTES LEFT IN BLOCK
	float materialRoughness;					// float  = 4 BYTES:	-> CONTINUE READING MEMORY BLOCK 	-> 4 BYTES READ 	-> CORRECT READ -> 4 BYTES LEFT IN BLOCK
	float2 materialOffset;						// float2 = 8 BYTES: 	-> CONTINUE READING MEMORY BLOCK	-> 4 BYTES READ 	-> WRONG READ* 	-> END OF MEMORY BLOCK
	
	// WRONG READ*: giati to teleutaio variable einai 8 bytes alla to memory block eixe 4 bytes na diavasei akoma, opote diavazei to miso kai pairneis corrupted data.
};

// WRONG EXAMPLE 2
cbuffer PerMaterialBuffer : register(b1)
{		
    float3 materialAlbedoColor; 				// float3 = 12 BYTES 	-> START OF MEMORY BLOCK 			-> 12 BYTES READ 	-> CORRECT READ 	-> 4 BYTES LEFT IN BLOCK
	float2 materialTiling;						// float2 = 8 BYTES:	-> CONTINUE READING MEMORY BLOCK 	-> 4 BYTES READ 	-> WRONG READ*1 	-> END OF MEMORY BLOCK
	float materialRoughness;					// float  = 4 BYTES:	-> START OF MEMORY BLOCK 			-> 4 BYTES READ 	-> WRONG READ*2 	-> 12 BYTES LEFT IN BLOCK
	float2 materialOffset;						// float2 = 8 BYTES: 	-> CONTINUE READING MEMORY BLOCK	-> 8 BYTES READ 	-> WRONG READ*3 	-> 4 BYTES LEFT IN BLOCK
	
	// WRONG READ*1 giati to 2o variable ithele 8 bytes gia na diavastei swsta, to gpu omws eixe mono 4 bytes akoma na diavasei sto sigekrimeno memory block.
	// WRONG READ*2 giati to GPU tha paei na diavasei ta alla 4 bytes pou ksekinise na diavazei apo to proigoumeno read (2o variable), me auto ton tropo opws tha paei kai tha grapsei panw sto epomeno variable (allo memory block).
	// WRONG READ*3 giati apo edw kai pera to memory allignment exei gamithei, to reads tha einai opws katsei
};

// CORRECT EXAMPLE 1 (FIX FOR WRONG EXAMPLE 1 BY REORDERING VARIABLES)
cbuffer PerMaterialBuffer : register(b1)
{		
    float4 materialAlbedoColor; 				// float4 = 16 BYTES 	-> START OF MEMORY BLOCK 			-> 16 BYTES READ 	-> CORRECT READ -> END OF MEMORY BLOCK
	float2 materialTiling;						// float2 = 8 BYTES:	-> CONTINUE READING MEMORY BLOCK 	-> 8 BYTES READ 	-> CORRECT READ -> 8 BYTES LEFT IN BLOCK
	float2 materialOffset;						// float2 = 8 BYTES: 	-> CONTINUE READING MEMORY BLOCK	-> 8 BYTES READ 	-> CORRECT READ -> END OF MEMORY BLOCK
	float materialRoughness;					// float  = 4 BYTES:	-> START OF MEMORY BLOCK 			-> 4 BYTES READ 	-> CORRECT READ -> 12 BYTES LEFT IN BLOCK*
	
	// 12 BYTES LEFT IN BLOCK*: SEE TRULY CORRECT EXAMPLE 2
};

// CORRECT EXAMPLE 2 (PERFORMANCE FIX FOR EXAMPLE 1)
cbuffer PerMaterialBuffer : register(b1)
{		
    float4 materialAlbedoColor; 				// float4 	= 16 BYTES 	-> START OF MEMORY BLOCK 			-> 16 BYTES READ 	-> CORRECT READ -> END OF MEMORY BLOCK
	float2 materialTiling;						// float2 	= 8 BYTES:	-> CONTINUE READING MEMORY BLOCK 	-> 8 BYTES READ 	-> CORRECT READ -> 8 BYTES LEFT IN BLOCK
	float2 materialOffset;						// float2 	= 8 BYTES: 	-> CONTINUE READING MEMORY BLOCK	-> 8 BYTES READ 	-> CORRECT READ -> END OF MEMORY BLOCK
	float materialRoughness;					// float  	= 4 BYTES:	-> CONTINUE READING MEMORY BLOCK 	-> 4 BYTES READ 	-> CORRECT READ -> 12 BYTES LEFT IN BLOCK*
	float3 dummyValue;							// float3  	= 12 BYTES:	-> CONTINUE READING MEMORY BLOCK 	-> 12 BYTES READ 	-> CORRECT READ -> END OF MEMORY BLOCK
	
	// 4 BYTES LEFT IN BLOCK*: An exoun apominei bytes gia na diavastoun sto teliko memory block, to gpu tha to katalavei kai tha valei padding mono tou, 
	// tha kostizei performance omws auto giati to vazeis na kanei extra douleia. Opote apla tou dineis ena dummy value pou exei oso megethos prepei wste na kleiseis to memory block
};